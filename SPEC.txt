Chess Evolutionary Algorithm Spec
by @itsjoekent, 2024
Version 1.0

=== SUMMARY ==============================================================

This is a system for developing an evolutionary algorithm that can
discover the optimal move to make in a chess game.

On each turn, one algorithm (the "board" algorithm) runs on each square of 
the chess board, assigning a point value to it. It will then repeat the 
process on a copy of the board for each valid move that was available.

A second algorithm (the "movement" algorithm) will then iterate over all 
of the moves made, and will rank each move, or decide to continue 
iterating down the search tree.



=== VARIABLES ============================================================

The algorithm has access to variables that describe the state of the board.
The variables should avoid adding strategic biases, for example, they
should not award "point values" to pieces. Variables are are purely for 
representing core game rules, such as being in check.

- All variables are evaluated into integers.
- All variables are evaluated in the context of the current turn. Two
distinct algorithms will be assigned a color, but each board algorithm 
will always run for both turns, for both players.
- `[B]` indicates the variable is available for the board algorithm.
- `[M]` indicates the variable is available for the move algorithm.
- `(0/1)` indicates the variable value will always be a binary integer.
- `(n)`, `(0-n)` indicates the variable value can be any value or any 
  value within a range.
- `${...}` indicates this variable has a version for the entire enum space.

is_self [B] (0/1) :: 1 if there is a piece on the square that belongs to 
the player whose turn it is.

is_opponent [B] (0/1) :: 1 if there is a piece on the square that does not
belong to the player whose turn it is.

is_empty [B] (0/1) :: 1 if there is no piece on the square.

is_${piece} [B] (0/1) :: 1 if the square is occupied by ${piece}.

is_in_check [B] [M] (0/1) :: 1 if the player is in check.

is_in_checkmate [B] [M] (0/1) :: 1 if the player is in checkmate.

is_draw [B] [M] (0/1) :: 1 if he game is going to end in a draw 
(stalemate, threefold repetition, insufficient material, etc).

castled_${side} [B] (0/1) :: 1 if the king on this square castled in the
previous move.

was_captured [B] (0/1) :: 1 if the last move captured a piece on this
square.

${piece}_was_captured [B] (0/1) :: 1 if the last move captured a ${piece}
on this square.

possible_moves [B] (0-n) :: n is equal to how many moves the piece on this
square can make.

can_capture [B] (0-n) :: n is equal to how many moves the piece on this
square can make that will capture another piece.

can_capture_${piece} [B] (0-n) :: n is equal to how many moves the piece 
on this square can make that will capture another ${piece}.

can_move_here [B] (0/1) :: 1 if any piece can move to this square.

${piece}_can_move_here [B] (0-n) :: n is equal to the amount of ${piece}'s
that can move to this square.

depth [M] (1-32) :: n is equal to the current depth of the tree search.

first_iteration_pre_move_total [M] (n) :: n is equal to the total square
points awarded by the evaluation algorithm on a board prior to making any
move. This value is fixed to the first time the evaluation algorithm runs.

first_iteration_post_move_total [M] (n) :: n is equal to the total square
points awarded by the evaluation algorithm on a board after making any
move. This value is fixed to the first time the evaluation algorithm runs.

prev_iteration_pre_move_total [M] (n) :: n is equal to the total square
points awarded by the evaluation algorithm on a board prior to making any
move. This value is fixed to the prior the evaluation algorithm run. If
there is no prior algorithm run, n is equal to zero.

prev_iteration_post_move_total [M] (n) :: n is equal to the total square
points awarded by the evaluation algorithm on a board after making any
move. This value is fixed to the prior the evaluation algorithm run. If
there is no prior algorithm run, n is equal to zero.

this_iteration_pre_move_total [M] (n) :: n is equal to the total square
points awarded by the evaluation algorithm on a board prior to making any
move. This value is fixed to the most recent time the evaluation algorithm
was run.

this_iteration_post_move_total [M] (n) :: n is equal to the total square
points awarded by the evaluation algorithm on a board after making any
move. This value is fixed to the most recent time the evaluation algorithm 
was run.



=== CUSTOM VARIABLES =====================================================

In addition to the game defined variables, the algorithm has access to 48
custom variables. 36 are reserved as static values that are set when the 
algorithm is first created. They can only be modified through evolution 
and mutation.

The remaining 24 variables can be set at runtime. Runtime variables are
set to 0 at the start of a game, and reset between games.

Each custom variable is an integer that can range from -99 to +99.



=== TOKENS ===============================================================

The algorithm is composed of tokens that represent mathematical or logical
operations.

All tokens evaluate to a numeric value. Some tokens require arguments in 
order to execute. Any token can be an argument for another token.

--------------------------------------------------------------------------
 ID        | ARGS  | DESCRIPTION
-----------+-------+------------------------------------------------------
`Add()`    | 2     | Add two values
`Sub()`    | 2     | Subtract two values
`Mul()`    | 2     | Multiply two values
`Div()`    | 2     | Divide two values
`Sqrt()`   | 1     | Get the square root
`Mod()`    | 2     | Find the remainder of a division
`Pow()`    | 2     | Raise the base to a power
`Round()`  | 1     | Round the value
`Floor()`  | 1     | Round the value down
`Ceil()`   | 1     | Round the value up
`Max()`    | 2-8   | Return the largest value
`Min()`    | 2-8   | Return the smallest value
`Abs()`    | 1     | Get the absolute value
`Eq()`     | 2     | Return 1 if all values are equal
`Neq()`    | 2     | Return 1 if all values are not equal
`Gt()`     | 2     | Return 1 if the left value is greater than the right
`Gte()`    | 2     | Return 1 if the left value is greater than or equal
`Lt()`     | 2     | Return 1 if the left value is less than the right
`Lte()`    | 2     | Return 1 if the left value is less than or equal
`Binary()` | 1     | Converts value to 0 or 1 (n >= 1)
`Invert()  | 1     | Inverts the binary value
`And()`    | 2     | Returns 1 if all values evaluate to binary 1
`Or()`     | 2     | Returns 1 if any value evaluates to binary 1
`If()`     | 3     | If the Binary(arg1) == 1, return the 2nd value
`Write()`  | 2     | Write the left value into the custom variable

In addition to the above function calls, each variable can be declared as
a standalone token.



=== EVOLUTION PROCESS ====================================================

The process of iterating on the evolutionary algorithm requires going 
through the following steps to generate a fitness score for the algorithm,

1. Initiate an evaluation algorithm and movement algorithm with random 
tokens, assign a color to play (black or white), and repeat to get an 
opponent to play. 
2. Start a new game of chess.
3. On each turn,
  A. Loop over each square, run the evaluation algorithm, aggregate the
  total for the board.
  B. Get all moves available, create copies of the game board that 
  represent each possible move.
    I. Loop over each square, run the evaluation algorithm, aggregate the
  total for the board.
  C. Run the movement algorithm for each move evaluated.
    I. If the algorithm returns zero, continue down this branch of
    possible moves by going back to step 3.
    II. If the algorithm returns a non-zero number, record this as the
    score for this move, regardless of the current depth of search.
    III. Once all move evaluations have completed, sort the scores 
    assigned to each move, pick the highest scored move.

Fitness points are awarded as follows,
* `+1` for each turn played.
* `+2` for capturing a piece.
* `-1` for losing a piece.
* `+3` for putting the king in check.
* `-1` for being put in check.
* `+5` for forcing draw (three-fold repition, etc).
* `-1` for being forced into a draw.
* `-10` for losing by checkmate.
* `+50` for checkmating.
* `-20` for running out of time when evaluating moves or not making one.

Once each algorithm has completed playing the game, the algorithms are
sorted by fitness points awarded. The top algorithms will create offspring and
mutate each child. Mutation involves adding, removing, or replacing a 
token, and modifying the value of one of the custom variables.

This process repeats until an optimal solution is discovered.
